
//! Autogenerated weights for `pallet_smart_agreement`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./../../target/release/hero
// benchmark
// pallet
// --pallet
// pallet-smart-agreement
// --extrinsic
// add_agreement_creator
// --steps
// 50
// --repeat
// 20
// --output
// add_agreement_creator.rs
// --record-proof

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_smart_agreement`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo<T> {
	// Storage: SmartAgreement AgreementCreator (r:1 w:1)
	pub fn add_agreement_creator() -> Weight {
		(8_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}

	// Storage: SmartAgreement AgreementCreator (r:1 w:1)
	pub fn remove_agreement_creator() -> Weight {
		(9_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}

	// Storage: SmartAgreement AgreementCreator (r:1 w:0)
	// Storage: SmartAgreement InfoForAgreement (r:1 w:1)
	// Storage: SmartAgreement AgreementCount (r:1 w:1)
	// Storage: SmartAgreement AgreementCountForUser (r:1 w:1)
	pub fn create_agreement(_c: u32, ) -> Weight {
		(14_962_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}
